{"version":3,"sources":["components/Productsearch.js","components/config.js","App.js","serviceWorker.js","index.js"],"names":["Productsearch","props","getProduct","e","preventDefault","productToSearch","target","elements","product","value","axios","post","then","res","console","log","data","hits","setState","products","alertShow","catch","error","errorMessage","reset","state","this","Helmet","Alert","severity","onSubmit","TextField","id","name","label","placeholder","className","map","Card","style","width","margin","CardContent","key","_source","media","product_images","src","first","alt","Typography","variant","component","color","price","diff_percentage","offer","displayType","thousandSeparator","suffix","Component","App","AppBar","position","Container","top","bottom","Button","Link","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wYA8FeA,G,kBApFb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAQRC,WAAa,SAAAC,GACXA,EAAEC,iBACF,IAAMC,EAAkBF,EAAEG,OAAOC,SAASC,QAAQC,MAClDC,IACGC,KADH,UCtBe,+GDsBf,2BACiCN,IAC9BO,MAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAIG,KAAKC,KAAKA,MAC1B,EAAKC,SAAS,CACZC,SAAUN,EAAIG,KAAKC,KAAKA,KACxBG,WAAW,OAGdC,OAAM,SAAAC,GACLR,QAAQC,IAAIO,GACZ,EAAKJ,SAAS,CACZK,aAAc,kCACdH,WAAW,OAGjBjB,EAAEG,OAAOkB,SA1BT,EAAKC,MAAQ,CACXF,aAAc,GACdJ,SAAU,GACVC,WAAW,GALI,E,sEA+BT,IACAA,EAAcM,KAAKD,MAAnBL,UACAG,EAAiBG,KAAKD,MAAtBF,aACAJ,EAAaO,KAAKD,MAAlBN,SACR,OACE,6BACE,kBAACQ,EAAA,OAAD,KACE,kDAEF,6BAAMP,GAAa,kBAACQ,EAAA,EAAD,CAAOC,SAAS,SAASN,IAC5C,0BAAMO,SAAUJ,KAAKxB,YACnB,kBAAC6B,EAAA,EAAD,CACEC,GAAG,iBACHC,KAAK,UACLC,MAAM,UACNC,YAAY,8BAGhB,yBAAKC,UAAU,gBACZjB,EAASkB,KAAI,SAAA7B,GAAO,OACnB,kBAAC8B,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,IAAKC,OAAQ,SACjC,kBAACC,EAAA,EAAD,CAAaC,IAAKnC,EAAQoC,QAAQZ,IAC/BxB,EAAQoC,QAAQpC,QAAQqC,MAAMC,eAC7B,yBACEC,IACEvC,EAAQoC,QAAQpC,QAAQqC,MAAMC,eAAeE,MAAM,KAErDC,IAAI,YAEJ,KACJ,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAChC5C,EAAQoC,SAAW,6BAAMpC,EAAQoC,QAAQpC,QAAQyB,OAEpD,kBAACiB,EAAA,EAAD,CAAYG,MAAM,iBAAlB,uBACuB7C,EAAQoC,QAAQU,MAAMC,gBAC3C,6BAFF,mBAGmB,IACjB,kBAAC,IAAD,CACE9C,MAAOD,EAAQoC,QAAQU,MAAME,MAC7BC,YAAa,OACbC,mBAAmB,EACnBC,OAAQ,mB,GAzEAC,c,oCE0BbC,MA9Bf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC0B,EAAA,EAAD,CAAQC,SAAS,UACf,kBAACb,EAAA,EAAD,CAAYC,QAAQ,KAAKE,MAAM,aAA/B,mBAIF,6BACA,kBAACW,EAAA,EAAD,KACE,kBAAC,EAAD,OAEF,kBAACF,EAAA,EAAD,CACEC,SAAS,QACTV,MAAM,UACNd,MAAO,CAAE0B,IAAK,OAAQC,OAAQ,IAE9B,kBAACC,EAAA,EAAD,CAAQd,MAAM,WACZ,kBAACe,EAAA,EAAD,CACEC,KAAK,6CACLhB,MAAM,WAEN,kFCfQiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrE,MAAK,SAAAsE,GACjCA,EAAaC,kB","file":"static/js/main.da01a5ec.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport axios from \"axios\";\r\nimport { TextField, Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport Alert from \"@material-ui/lab/Alert\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport \"./Productsearch.css\";\r\nimport { URL } from \"../components/config\";\r\n\r\nclass Productsearch extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      errorMessage: \"\",\r\n      products: [],\r\n      alertShow: false\r\n    };\r\n  }\r\n\r\n  getProduct = e => {\r\n    e.preventDefault();\r\n    const productToSearch = e.target.elements.product.value;\r\n    axios\r\n      .post(`${URL}?q=product.name:${productToSearch}`)\r\n      .then(res => {\r\n        console.log(res.data.hits.hits);\r\n        this.setState({\r\n          products: res.data.hits.hits,\r\n          alertShow: false\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n        this.setState({\r\n          errorMessage: \"Please fill in the Product Name\",\r\n          alertShow: true\r\n        });\r\n      });\r\n    e.target.reset(); // making input empty\r\n  };\r\n\r\n  render() {\r\n    const { alertShow } = this.state;\r\n    const { errorMessage } = this.state;\r\n    const { products } = this.state;\r\n    return (\r\n      <div>\r\n        <Helmet>\r\n          <title>Product Search</title>\r\n        </Helmet>\r\n        <div>{alertShow && <Alert severity=\"error\">{errorMessage}</Alert>}</div>\r\n        <form onSubmit={this.getProduct}>\r\n          <TextField\r\n            id=\"standard-basic\"\r\n            name=\"product\"\r\n            label=\"Product\"\r\n            placeholder=\"Search for ... e.g.apple\"\r\n          />\r\n        </form>\r\n        <div className=\"product-card\">\r\n          {products.map(product => (\r\n            <Card style={{ width: 275, margin: \"10px\" }}>\r\n              <CardContent key={product._source.id}>\r\n                {product._source.product.media.product_images ? (\r\n                  <img\r\n                    src={\r\n                      product._source.product.media.product_images.first[140]\r\n                    }\r\n                    alt=\"product\"\r\n                  />\r\n                ) : null}\r\n                <Typography variant=\"h5\" component=\"h2\">\r\n                  {product._source && <div>{product._source.product.name}</div>}\r\n                </Typography>\r\n                <Typography color=\"textSecondary\">\r\n                  Dropped Percentage: {product._source.price.diff_percentage}\r\n                  <br />\r\n                  Formatted Price:{\" \"}\r\n                  <NumberFormat\r\n                    value={product._source.price.offer}\r\n                    displayType={\"text\"}\r\n                    thousandSeparator={true}\r\n                    suffix={\"kr\"}\r\n                  />\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Productsearch;\r\n","export const URL = \"https://search-pj-campaigns-dykc3wbnqz22xvoiwp2ta5bk3m.eu-west-1.es.amazonaws.com/campaign-*-4-deals/_search\";","import React from \"react\";\nimport \"./App.css\";\nimport Productsearch from \"./components/Productsearch\";\nimport { AppBar, Typography, Container, Button, Link } from \"@material-ui/core\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AppBar position=\"static\">\n        <Typography variant=\"h5\" color=\"secondary\">\n          PRODUCT SEARCH\n        </Typography>\n      </AppBar>\n      <br />\n      <Container>\n        <Productsearch />\n      </Container>\n      <AppBar\n        position=\"fixed\"\n        color=\"default\"\n        style={{ top: \"auto\", bottom: 0 }}\n      >\n        <Button color=\"primary\">\n          <Link\n            href=\"https://truptigaonkar.github.io/portfolio/\"\n            color=\"inherit\"\n          >\n            <b>Copyright &copy; Trupti Gaonkar's portfolio 2020</b>\n          </Link>\n        </Button>\n      </AppBar>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}